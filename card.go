package stripe

import (
	"encoding/json"
	"fmt"
	"net/url"
	"strconv"
)

// Card is a representation of a credit card, as reported by the Stripe API.
type Card struct {
	Type              string `json:"type"` // Card brand.
	ExpYear           int    `json:"exp_year"`
	CVC               string `json:"cvc"`
	CVCCheck          string `json:"cvc_check"` // The result of a check: "pass", "fail", "unchecked", or nil
	Country           string `json:"country"`   // Stripe's "best guess" at the country the card is in
	Name              string `json:"name"`
	AddressCountry    string `json:"address_country"` // The user-supplied country for the card's billing address
	State             string `json:"address_state"`
	Zip               string `json:"address_zip"`
	AddressLine1      string `json:"address_line1"`
	AddressLine2      string `json:"address_line2"`
	LastFour          string `json:"last4"`
	Number            string `json:"number"`
	Object            string `json:"object"` // Should always be "card"
	ExpMonth          int    `json:"exp_month"`
	Fingerprint       string `json:"fingerprint"`         // This uniquely identifies the card's number
	AddressZipCheck   string `json:"address_zip_check"`   // The result of a zip code check: "pass", "fail", "unchecked", or "nil"
	AddressLine1Check string `json:"address_line1_check"` // The result of an address check: "pass", "fail", "unchecked", or "nil"
	ID                string `json:"id"`
}

func (card *Card) String() string {
	if card.Number != "" {
		return card.Number
	}
	if card.ID != "" {
		return card.ID
	}
	if card.Name != "" {
		str := fmt.Sprintf("%s's", card.Name)
		if card.Type != "" {
			str = fmt.Sprintf("%s %s", str, card.Type)
		} else {
			str = fmt.Sprintf("%s card", str)
		}
		if card.LastFour != "" {
			str = fmt.Sprintf("%s (%s)", str, card.LastFour)
		}
		return str
	}
	if card.Fingerprint != "" {
		return fmt.Sprintf("Fingerprint: %s", card.Fingerprint)
	}
	return "Unknown card."
}

// ChargeValues sets *card's non-empty properties to their appropriate key in *values
// This is useful for constructing HTTP requests from Card objects
// This also satisfies the Chargeable interface, allowing Cards to be charged
func (card *Card) ChargeValues(values *url.Values) error {
	if card == nil {
		// TODO: Throw error
	}
	if card.Number != "" {
		values.Set("card[number]", card.Number)
	} else {
		// TODO: Throw error
	}
	if card.ExpMonth != 0 {
		values.Set("card[exp_month]", strconv.Itoa(card.ExpMonth))
	} else {
		// TODO: Throw error
	}
	if card.ExpYear != 0 {
		values.Set("card[exp_year]", strconv.Itoa(card.ExpYear))
	} else {
		// TODO: throw error
	}
	if card.CVC != "" {
		values.Set("card[cvc]", card.CVC)
	}
	if card.Name != "" {
		values.Set("card[name]", card.Name)
	}
	if card.AddressLine1 != "" {
		values.Set("card[address_line1]", card.AddressLine1)
	}
	if card.AddressLine2 != "" {
		values.Set("card[address_line2]", card.AddressLine2)
	}
	if card.Zip != "" {
		values.Set("card[address_zip]", card.Zip)
	}
	if card.State != "" {
		values.Set("card[address_state]", card.State)
	}
	if card.AddressCountry != "" {
		values.Set("card[address_country]", card.AddressCountry)
	} else if card.Country != "" {
		values.Set("card[address_country]", card.Country)
	}
	return nil
}

// Token is the representation of a credit card token, the one-use string generated by Stripe to be used as a credit card.
type Token struct {
	LiveMode bool      `json:"livemode"`
	Created  int64     `json:"created"`
	Used     bool      `json:"used"`
	Amount   int64     `json:"amount"`
	Object   string    `json:"object"` // Should always be "token"
	Currency string    `json:"currency"`
	ID       string    `json:"id"`
	Card     *Card     `json:"card"`
	Error    *RawError `json:"error"`
}

func (token *Token) String() string {
	return fmt.Sprintf("%s (%s)", token.ID, token.Card)
}

// ChargeValues sets *token's ID to the appropriate key in *values.
// This is handy for constructing HTTP requests from Tokens.
// This also satisfies the Chargeable interface, allowing tokens to be charged.
func (token *Token) ChargeValues(values *url.Values) error {
	if token == nil {
		// TODO: throw an error
	}
	if token.ID != "" {
		values.Set("card", token.ID)
	} else {
		// TODO: Throw an error
	}
	return nil
}

// GetToken retrieves the Token with an ID of id from Stripe
func (stripe *Stripe) GetToken(id string) (resp *Token, err error) {
	r, err := stripe.request("GET", "tokens/"+id, "")
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(r, &resp)
	if err != nil {
		return nil, err
	}
	if resp.Error != nil {
		//TODO: Throw an error
	}
	return resp, err
}

// Create token swaps credit card details for a Token on Stripe's servers
func (stripe *Stripe) CreateToken(card *Card) (resp *Token, err error) {
	values := make(url.Values)
	if card == nil {
		// TODO: throw an error
	}
	err = card.ChargeValues(&values)
	if err != nil {
		return nil, err
	}
	params := values.Encode()
	r, err := stripe.request("POST", "tokens", params)
	if err != nil {
		return nil, err
	}
	err = json.Unmarshal(r, &resp)
	if err != nil {
		return nil, err
	}
	if resp.Error != nil {
		//TODO: Throw an error
	}
	return resp, nil
}
